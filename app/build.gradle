/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Apply Spotless plugin for code formatting
    id 'com.diffplug.spotless' version '6.25.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava

    // Add Picocli dependency for command line parsing
    implementation 'info.picocli:picocli:4.7.5'

    // Add annotation processor for Picocli
    annotationProcessor 'info.picocli:picocli-codegen:4.7.5'
}

// Define source sets for integration tests
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

// Create a specific configuration for integration tests
configurations {
    integrationTestImplementation.extendsFrom implementation, testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly, testRuntimeOnly
}

// Add dependencies specifically for integration tests
dependencies {
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
}

// Create an integration test task
task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()

    // Should run after unit tests
    shouldRunAfter test

    // Show standard out and standard error of the test JVM(s) on the console
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Create a task to run all tests
tasks.register('allTests') {
    dependsOn test, integrationTest
    description = 'Runs all tests (unit and integration)'
    group = 'verification'
}

// Configure the built-in test suite
testing {
    suites {
        test {
            useJUnitJupiter('5.11.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.app.App'
}

// Configure the distribution
distributions {
    main {
        distributionBaseName = 'file-organizer'
    }
}

// Create a standalone runnable jar with dependencies
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Assembles a jar archive containing the main classes and all dependencies.'

    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes('Main-Class': application.mainClass)
    }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Configure Spotless for code formatting
spotless {
    java {
        // Use the Google Java format
        googleJavaFormat()
    }
}
